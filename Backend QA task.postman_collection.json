{
	"info": {
		"_postman_id": "8f289243-3b3a-43fb-a853-cef3afeb03fa",
		"name": "Backend QA task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43541953",
		"_collection_link": "https://ilonastryzhko-9476376.postman.co/workspace/c07407ca-5623-445c-8e37-7228b4fc3624/collection/43541953-8f289243-3b3a-43fb-a853-cef3afeb03fa?action=share&source=collection_link&creator=43541953"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomString(length) {",
							"    const chars = 'abcdefghijklmnopqrstuvwxyz';",
							"    return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');",
							"}",
							"",
							"function randomPhone() {",
							"    return Math.floor(100000000 + Math.random() * 900000000).toString();",
							"}",
							"",
							"function randomEmail() {",
							"    return `${randomString(6)}_${Date.now()}@example.com`;",
							"}",
							"",
							"function randomPassword(length = 10) {",
							"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%';",
							"    return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');",
							"}",
							"",
							"pm.environment.set(\"id\", Math.floor(Math.random() * 100000));",
							"pm.environment.set(\"username\", \"user_\" + randomString(5));",
							"pm.environment.set(\"firstName\", \"TestFirst_\" + randomString(3));",
							"pm.environment.set(\"lastName\", \"TestLast_\" + randomString(3));",
							"pm.environment.set(\"email\", randomEmail());",
							"pm.environment.set(\"password\", randomPassword());",
							"pm.environment.set(\"phone\", randomPhone());",
							"pm.environment.set(\"userStatus\", Math.random() < 0.5 ? \"0\" : \"1\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200 or 201: User is created\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"Response contains 'ok'\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"ok\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"id\": {{id}},\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"string\",\n    \"phone\": \"{{phone}}\",\n    \"userStatus\": {{userStatus}}\n  }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/createWithList",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"createWithList"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const maxRetries = 3;",
							"const retryDelay = 1000;",
							"let currentRetry = parseInt(pm.environment.get(\"getUserRetry\") || \"0\");",
							"",
							"if (pm.response.code !== 200 && currentRetry < maxRetries) {",
							"    console.log(`Retrying Get User... attempt ${currentRetry + 1}`);",
							"    pm.environment.set(\"getUserRetry\", currentRetry + 1);",
							"    postman.setNextRequest(\"Get User\");",
							"} else {",
							"    pm.environment.unset(\"getUserRetry\");",
							"",
							"    pm.test(\"Status 200: user found\", function () {",
							"        pm.expect(pm.response.code).to.eql(200);",
							"    });",
							"",
							"    if (pm.response.code === 200) {",
							"        const jsonData = pm.response.json();",
							"        pm.test(\"Username is as expected\", function () {",
							"            pm.expect(jsonData.username).to.eql(pm.environment.get(\"username\"));",
							"        });",
							"        pm.test(\"User ID is correct\", function () {",
							"            pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"id\")));",
							"        });",
							"    }",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/{{username}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"{{username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"firstName\", \"UpdatedFirst_\" + Math.random().toString(36).substring(2,5));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{id}}\",\n  \"username\": \"{{username}}\",\n  \"firstName\": \"UpdatedFirst\",\n  \"lastName\": \"UpdatedLast\",\n  \"email\": \"{{email}}\",\n  \"password\": \"newPassword123\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": \"0\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/{{username}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"{{username}}"
					]
				},
				"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://petstore.swagger.io/v2/user/user666' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}'"
			},
			"response": []
		},
		{
			"name": "Get user after change",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"const jsonData = pm.response.json();",
							"pm.test(\"Username matches\", function () {",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/{{username}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"{{username}}"
					]
				}
			},
			"response": []
		}
	]
}